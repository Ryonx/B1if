<?xml version="1.0" encoding="UTF-8"?><xs:schema xmlns:bfa="urn:com.sap.b1i.bizprocessor:bizatoms" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="BOM" type="BOMType">
		<xs:annotation>
			<xs:documentation>Root element for the document</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="BOMType">
		<xs:annotation>
			<xs:documentation>Automatically generated complex type comprising the whole document for the purpose of schema re-use</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetDB" form="unqualified" type="xs:string"></xs:element>
				<xs:element name="TopSQL" form="unqualified" type="xs:string"></xs:element>
					<xs:element name="TableName" form="unqualified" type="xs:string"></xs:element>
			<xs:element name="BO" form="unqualified">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Documents" form="unqualified">
							<xs:complexType>
								<xs:sequence>
									<xs:element name="row" form="unqualified">
										<xs:complexType>
											<xs:sequence>
												<xs:element name="DocDueDate" form="unqualified" type="xs:string"></xs:element>
												<xs:element name="CardCode" form="unqualified" type="xs:string"></xs:element>
												<xs:element name="TaxDate" form="unqualified" type="xs:string"></xs:element>
											</xs:sequence>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="Document_Lines" form="unqualified">
							<xs:complexType>
								<xs:sequence>
									<xs:annotation>
										<xs:documentation>As the element &apos;Document_Lines&apos; contains multiple child-elements with the same name, it is assumed that it contains a database-table dump with similar rows. Thus, only one of those multiple elements with the biggest sub-element count has been dumped to this schema, assuming to be the superset of such a row, allowing a cardinality from zero til unbounded, making all of the sub-elements optional. Note that it is necessary for this approach being accurate that at least one of those rows has to contain the maximum number of fields; also, disjunct or order-reversed field-lists amongst rows also lead to inaccuracy. Also note that potentially otherl sub-elements with distinct names have been left out of the generated schema, as rows have to look homogeneous!</xs:documentation>
									</xs:annotation>
									<xs:element name="row" form="unqualified" minOccurs="0" maxOccurs="unbounded">
										<xs:complexType>
											<xs:sequence>
												<xs:element name="ItemCode" form="unqualified" minOccurs="0" type="xs:string"></xs:element>
												<xs:element name="Quantity" form="unqualified" minOccurs="0" type="xs:string"></xs:element>
												<xs:element name="UnitPrice" form="unqualified" minOccurs="0" type="xs:string"></xs:element>
											</xs:sequence>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						
						
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>